version: '3.8'

services:
  # Backend API (using existing backend docker-compose setup)
  backend:
    build:
      context: ./knowledge_portal_backend
      dockerfile: Dockerfile
    container_name: knowledge-portal-backend
    ports:
      - "8000:8000"
    environment:
      - 'BACKEND_CORS_ORIGINS=["http://localhost:3000","http://localhost:8080","http://127.0.0.1:3000","http://127.0.0.1:8080"]'
      - ROOT_PATH=/agent/api
      - API_V1_STR=/api/v1
      - POSTGRES_SERVER=host.docker.internal
      - POSTGRES_HOST=host.docker.internal
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-knowledge_portal}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ELASTICSEARCH_HOST=elasticsearch
      - ELASTICSEARCH_PORT=9200
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - ACCESS_TOKEN_EXPIRE_MINUTES=11520
      - SESSION_SECRET_KEY=your-super-secret-key
      - SESSION_EXPIRE_MINUTES=60
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - GOOGLE_REDIRECT_URI=http://localhost:8000/api/v1/auth/google/callback
      - DEBUG=true
    volumes:
      - ./knowledge_portal_backend:/app
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - redis
      - elasticsearch
    networks:
      - app-network

  # Redis (from backend setup)
  redis:
    image: redis:7-alpine
    container_name: knowledge-portal-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - app-network

  # Elasticsearch (from backend setup)
  elasticsearch:
    build:
      context: ./knowledge_portal_backend/docker/elasticsearch
      dockerfile: Dockerfile
    container_name: knowledge-portal-elasticsearch
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200 >/dev/null || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - app-network

  # Frontend Development
  frontend-dev:
    build:
      context: ./knowledge_portal_frontend
      dockerfile: Dockerfile.dev
    container_name: knowledge-portal-frontend-dev
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8000}
      - REACT_APP_GOOGLE_CLIENT_ID=${REACT_APP_GOOGLE_CLIENT_ID}
      - CHOKIDAR_USEPOLLING=true
      - NODE_ENV=development
      - CI=false
      - DISABLE_ESLINT_PLUGIN=true
    volumes:
      - ./knowledge_portal_frontend:/app
      - /app/node_modules
    networks:
      - app-network

  # Frontend Production Build
  frontend-prod:
    build:
      context: ./knowledge_portal_frontend
      dockerfile: Dockerfile
    container_name: knowledge-portal-frontend-prod
    ports:
      - "3001:80"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - NODE_ENV=production
    networks:
      - app-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: knowledge-portal-nginx
    ports:
      - "8080:80"
    volumes:
      - ./knowledge_portal_frontend/nginx.dev.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - backend
      - frontend-dev
    networks:
      - app-network

volumes:
  redis_data:
  elasticsearch_data:

networks:
  app-network:
    driver: bridge 